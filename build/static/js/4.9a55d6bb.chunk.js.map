{"version":3,"sources":["components/toolbar.jsx","components/visualizer.jsx"],"names":["Toolbar","copyToClipBoard","text","JSON","stringify","props","data","navigator","clipboard","writeText","notification","success","toggleExpand","root","state","expand","setState","toggleDelete","deleted","obj","this","Array","isArray","length","Object","keys","variant","tooltip","onClick","expanded","ButtonToolbar","className","aria-label","ButtonGroup","Button","disabled","Badge","getDataDescription","hide_controls","Fragment","Component","Table","lazy","THEMES","light","key","str","num","null","boolean","dark","getColorFromTheme","value_type","darkMode","Visualizer","expand_signal","TRUNCATE_LIMIT","filter","memoize","filterText","filterObj","renderExpandButton","setStateDelegation","isExpandable","bind","truncateStrings","visualizeSimpleContents","filteredData","searchText","makeTable","headings","table","visualizeHeadings","renderTable","visualizeNull","is_heading","visualizeString","visualizeNumber","visualizeBoolean","console","log","s","b","rows","fallback","Spinner","animation","bordered","responsive","size","style","marginBottom","map","heading","row","rowIndex","cell","row_path","join_path","json_path","path_key","value","th","showJsonPath","slice","colIndex","MyCell","handleClick","event","stopPropagation","includes","target","nodeName","innerHTML","preventDefault","Tag"],"mappings":"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","file":"static/js/4.9a55d6bb.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { FaUndo } from \"react-icons/fa\";\nimport { MdContentCopy, MdDelete } from \"react-icons/md\";\nimport { BiCollapse, BiExpand } from \"react-icons/bi\";\nimport ToolTipButton from \"./tooltip_button\";\nimport { notification } from \"./utils\";\n\nimport { Badge, Button, ButtonGroup, ButtonToolbar } from \"react-bootstrap\";\n\nclass Toolbar extends Component {\n  copyToClipBoard = () => {\n    const text = JSON.stringify(this.props.data);\n    navigator.clipboard.writeText(text);\n    notification.success(\"JSON copied to the clipboard.\");\n  };\n\n  toggleExpand = () => {\n    if (!this.props.root) {\n      let state = { ...this.props.state };\n      state.expand = !state.expand;\n      this.props.setState(state);\n    }\n  };\n\n  toggleDelete = () => {\n    let state = { ...this.props.state };\n    state.deleted = !state.deleted;\n    this.props.setState(state);\n  };\n\n  getDataDescription() {\n    const obj = this.props.data;\n    if (Array.isArray(obj)) {\n      const length = obj.length;\n      return `Array, [${length} item${length > 1 ? \"s\" : \"\"}]`;\n    }\n    if (typeof obj === \"object\") {\n      const length = Object.keys(obj).length;\n      return `Object, [${length} ${length > 1 ? \"Properties\" : \"Property\"}]`;\n    }\n    return typeof this.props.data;\n  }\n\n  render() {\n    if (this.props.state.deleted) {\n      return (\n        <ToolTipButton\n          variant=\"danger\"\n          tooltip=\"Undo Delete\"\n          onClick={this.toggleDelete}\n        >\n          <FaUndo />\n        </ToolTipButton>\n      );\n    }\n\n    const expanded = this.props.state.expand || this.props.root;\n\n    return (\n      <ButtonToolbar className=\"p-0\" aria-label=\"Toolbar with Button groups\">\n        <ButtonGroup className=\"me-2\" aria-label=\"First group\">\n          <Button variant=\"primary\" disabled>\n            <Badge variant=\"light\">{this.getDataDescription()}</Badge>\n          </Button>\n\n          {!this.props.hide_controls && (\n            <React.Fragment>\n              {expanded ? (\n                <ToolTipButton\n                  variant=\"warning\"\n                  tooltip=\"Collapse\"\n                  onClick={this.toggleExpand}\n                >\n                  <BiCollapse />\n                </ToolTipButton>\n              ) : (\n                <ToolTipButton\n                  variant=\"primary\"\n                  tooltip=\"Expand\"\n                  onClick={this.toggleExpand}\n                >\n                  <BiExpand />\n                </ToolTipButton>\n              )}\n              <ToolTipButton\n                variant=\"success\"\n                tooltip=\"Copy JSON\"\n                onClick={this.copyToClipBoard}\n              >\n                <MdContentCopy />\n              </ToolTipButton>\n              <ToolTipButton\n                variant=\"danger\"\n                tooltip=\"Delete from DOM\"\n                onClick={this.toggleDelete}\n              >\n                <MdDelete />\n              </ToolTipButton>\n            </React.Fragment>\n          )}\n        </ButtonGroup>\n      </ButtonToolbar>\n    );\n  }\n}\n\nexport default Toolbar;\n","import React, { Component, lazy, Suspense } from \"react\";\nimport Toolbar from \"./toolbar\";\nimport { Spinner } from \"react-bootstrap\";\nimport memoize from \"memoize-one\";\n\nimport makeTable, { join_path, filterObj, truncateStrings } from \"./utils\";\n\nconst Table = lazy(() => import(\"react-bootstrap/Table\"));\n\n// There are the css classes used by Monaco Editor for different data types. e.g;\n// mtk4, mtk5, mtk6, mtk7, ...\n// We are using the same classes.\nconst THEMES = {\n  light: {\n    key: \"mtk20\",\n    str: \"text-info\",\n    num: \"mtk7\",\n    null: \"text-danger\",\n    boolean: \"mtk5\",\n  },\n  dark: {\n    key: \"mtk4\",\n    str: \"text-info\",\n    num: \"mtk6\",\n    null: \"text-danger\",\n    boolean: \"mtk5\",\n  },\n};\n\nfunction getColorFromTheme(props, value_type) {\n  const theme = props.darkMode ? THEMES.dark : THEMES.light;\n  return theme[value_type];\n}\n\nexport default class Visualizer extends Component {\n  state = {\n    expand: false,\n    expand_signal: \"\",\n    deleted: false,\n  };\n\n  TRUNCATE_LIMIT = 50;\n\n  constructor(props) {\n    super(props);\n    this.setStateDelegation = this.setState.bind(this);\n  }\n\n  filter = memoize((obj, filterText) => {\n    return filterObj(obj, filterText);\n  });\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.expand_signal === \"+\") {\n      const new_state = { ...state, expand: true };\n      return new_state;\n    } else if (props.expand_signal === \"-\") {\n      const new_state = { ...state, expand: false };\n      return new_state;\n    }\n    return null;\n  }\n\n  render() {\n    // render undo delete button\n    if (this.state.deleted) {\n      return this.renderExpandButton();\n    }\n\n    const data = this.props.data;\n\n    // visualize simple data within a cell\n    if (!this.isExpandable()) {\n      if (this.props.truncateStrings) {\n        return this.visualizeSimpleContents(\n          truncateStrings(this.props.data, this.TRUNCATE_LIMIT)\n        );\n      }\n      return this.visualizeSimpleContents(data);\n    }\n\n    const filteredData = this.filter(data, this.props.searchText);\n    const { headings, table } = makeTable(filteredData);\n    if (table.length < 1) {\n      if (this.props.root) {\n        return this.visualizeHeadings(\"NO RESULTS\");\n      }\n      return null;\n    }\n\n    if (this.state.expand || this.props.root || this.props.searchText) {\n      // Visualize data along with a expand/collapse button\n      return (\n        <React.Fragment>\n          {this.renderExpandButton()}\n          {this.renderTable(headings, table)}\n        </React.Fragment>\n      );\n    }\n\n    // The data is collapsed, just render the button\n    return this.renderExpandButton();\n  }\n\n  renderExpandButton = () => {\n    return (\n      <Toolbar\n        data={this.props.data}\n        state={this.state}\n        setState={this.setStateDelegation}\n        hide_controls={this.props.root === true}\n        root={this.props.root === true}\n      />\n    );\n  };\n\n  isExpandable = () => {\n    const data = this.props.data;\n\n    if (data === null) {\n      return false;\n    }\n    if (Array.isArray(data)) {\n      return data.length > 0;\n    } else if (typeof data === \"object\") {\n      return Object.keys(data).length > 0;\n    }\n    return false;\n  };\n\n  visualizeSimpleContents(data) {\n    if (data === null) {\n      return this.visualizeNull();\n    } else if (this.props.is_heading) {\n      return this.visualizeHeadings(data);\n    } else if (typeof data === \"string\") {\n      return this.visualizeString(data);\n    } else if (typeof data === \"number\") {\n      return this.visualizeNumber(data);\n    } else if (data === false || data === true) {\n      return this.visualizeBoolean(data);\n    } else if (Array.isArray(data)) {\n      // An \"Empty\" Array found\n      if (data.length < 1) {\n        return \"[]\";\n      }\n    } else if (typeof data === \"object\") {\n      // An \"Empty\" Object found\n      if (Object.keys(data).length < 1) {\n        return \"{}\";\n      }\n    }\n    if (typeof data === \"symbol\") {\n      // any React symbol that is ready to render\n      return data;\n    }\n\n    console.log(\"Unknown Type to be displayed\", typeof data);\n    return <p>Some Data of type {typeof data}</p>;\n  }\n\n  visualizeNull() {\n    return <span className={getColorFromTheme(this.props, \"null\")}>null</span>;\n  }\n\n  visualizeHeadings(data) {\n    return <span className={getColorFromTheme(this.props, \"key\")}>{data}</span>;\n  }\n\n  visualizeString(s) {\n    return (\n      <span className={getColorFromTheme(this.props, \"str\")}>\n        {s ? s : '\"\"'}\n      </span>\n    );\n  }\n\n  visualizeNumber(num) {\n    return <span className={getColorFromTheme(this.props, \"num\")}>{num}</span>;\n  }\n\n  visualizeBoolean(b) {\n    return (\n      <span className={getColorFromTheme(this.props, \"boolean\")}>\n        {b ? \"true\" : \"false\"}\n      </span>\n    );\n  }\n\n  renderTable(headings, rows) {\n    return (\n      <Suspense fallback={<Spinner animation=\"border\" variant=\"primary\" />}>\n        <Table\n          bordered\n          responsive={this.props.root ? true : false}\n          size=\"sm\"\n          variant={this.props.darkMode && \"dark\"}\n          style={{ marginBottom: 0 }}\n        >\n          <thead>\n            <tr>\n              {headings.map((heading) => (\n                <th key={heading} className=\"fit-contents\">\n                  {heading}\n                </th>\n              ))}\n            </tr>\n          </thead>\n          <tbody>\n            {rows.map((row, rowIndex) => {\n              const cell = row[0];\n              const row_path = join_path(this.props.json_path, cell.path_key);\n              return (\n                <tr key={rowIndex}>\n                  <MyCell\n                    key={cell.path_key}\n                    value={cell.value}\n                    th={true}\n                    json_path={row_path}\n                    showJsonPath={this.props.showJsonPath}\n                    truncateStrings={this.props.truncateStrings}\n                    expand_signal={this.props.expand_signal}\n                    darkMode={this.props.darkMode}\n                  />\n                  {row.slice(1).map((cell, colIndex) => {\n                    if (cell) {\n                      return (\n                        <MyCell\n                          key={cell.path_key}\n                          value={cell.value}\n                          json_path={join_path(row_path, cell.path_key)}\n                          showJsonPath={this.props.showJsonPath}\n                          truncateStrings={this.props.truncateStrings}\n                          searchText={this.props.searchText}\n                          expand_signal={this.props.expand_signal}\n                          darkMode={this.props.darkMode}\n                        />\n                      );\n                    }\n                    return <td key={colIndex}></td>;\n                  })}\n                </tr>\n              );\n            })}\n          </tbody>\n        </Table>\n      </Suspense>\n    );\n  }\n}\n\nclass MyCell extends Component {\n  handleClick = (event) => {\n    event.stopPropagation();\n    if (\n      [\"TD\", \"TH\", \"SPAN\"].includes(event.target.nodeName) &&\n      event.target.innerHTML\n    ) {\n      // handle the event\n\n      this.props.showJsonPath(this.props.json_path);\n    } else {\n      // ignore the event\n      event.preventDefault();\n    }\n  };\n\n  render() {\n    const Tag = this.props.th ? \"th\" : \"td\";\n    return (\n      <Tag onClick={this.handleClick}>\n        <Visualizer\n          is_heading={this.props.th}\n          data={this.props.value}\n          json_path={this.props.json_path}\n          showJsonPath={this.props.showJsonPath}\n          truncateStrings={this.props.truncateStrings}\n          searchText={this.props.searchText}\n          expand_signal={this.props.expand_signal}\n          darkMode={this.props.darkMode}\n        />\n      </Tag>\n    );\n  }\n}\n"],"sourceRoot":""}