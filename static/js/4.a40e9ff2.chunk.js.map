{"version":3,"sources":["features/toolbar.jsx","features/visualizer/helper.jsx","features/visualizer/visualizer.jsx"],"names":["Toolbar","copyToClipBoard","text","JSON","stringify","props","data","navigator","clipboard","writeText","notification","success","toggleExpand","root","state","expanded","setState","toggleDelete","deleted","obj","this","Array","isArray","length","Object","keys","variant","tooltip","onClick","ButtonToolbar","ButtonGroup","className","Button","disabled","Badge","getDataDescription","Fragment","Component","THEMES","light","key","str","num","null","boolean","dark","visualizeSimpleContents","isDarkMode","is_heading","b","s","getCss","theme","value_type","getCssForTheme","visualizeHeadings","console","log","Table","lazy","filter","memoize","filterText","filterObj","Visualizer","useSelector","statusbar","searchText","expandAll","collapseAll","input","settings","darkMode","TRUNCATE_LIMIT","truncateLimit","useState","renderExpandButton","isExpandable","truncateStrings","filteredData","makeTable","headings","table","rows","fallback","Spinner","animation","bordered","responsive","size","style","marginBottom","map","heading","row","rowIndex","cell","row_path","join_path","json_path","path_key","MyCell","value","th","slice","colIndex","renderTable","dispatch","useDispatch","Tag","event","stopPropagation","includes","target","nodeName","innerHTML","updateJsonPath","preventDefault"],"mappings":"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","file":"static/js/4.a40e9ff2.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { FaUndo } from \"react-icons/fa\";\nimport { MdContentCopy, MdDelete } from \"react-icons/md\";\nimport { BiCollapse, BiExpand } from \"react-icons/bi\";\nimport ToolTipButton from \"./tooltip_button\";\nimport { notification } from \"../app/utils\";\n\nimport { Badge, Button, ButtonGroup, ButtonToolbar } from \"react-bootstrap\";\n\nclass Toolbar extends Component {\n  copyToClipBoard = () => {\n    const text = JSON.stringify(this.props.data);\n    navigator.clipboard.writeText(text);\n    notification.success(\"JSON copied to the clipboard.\");\n  };\n\n  toggleExpand = () => {\n    if (!this.props.root) {\n      let state = { ...this.props.state };\n      state.expanded = !state.expanded;\n      this.props.setState(state);\n    }\n  };\n\n  toggleDelete = () => {\n    let state = { ...this.props.state };\n    state.deleted = !state.deleted;\n    this.props.setState(state);\n  };\n\n  getDataDescription() {\n    const obj = this.props.data;\n    if (Array.isArray(obj)) {\n      const length = obj.length;\n      return `Array, [${length} item${length > 1 ? \"s\" : \"\"}]`;\n    }\n    if (typeof obj === \"object\") {\n      const length = Object.keys(obj).length;\n      return `Object, [${length} ${length > 1 ? \"Properties\" : \"Property\"}]`;\n    }\n    return typeof this.props.data;\n  }\n\n  render() {\n    if (this.props.state.deleted) {\n      return (\n        <ToolTipButton\n          variant=\"danger\"\n          tooltip=\"Undo Delete\"\n          onClick={this.toggleDelete}\n        >\n          <FaUndo />\n        </ToolTipButton>\n      );\n    }\n\n    const expanded = this.props.state.expanded || this.props.root;\n\n    return (\n      <ButtonToolbar aria-label=\"Toolbar with Button groups\">\n        <ButtonGroup className=\"me-2\" aria-label=\"First group\">\n          <Button variant=\"primary\" disabled>\n            <Badge variant=\"light\">{this.getDataDescription()}</Badge>\n          </Button>\n\n          {!this.props.root && (\n            <React.Fragment>\n              {expanded ? (\n                <ToolTipButton\n                  variant=\"warning\"\n                  tooltip=\"Collapse\"\n                  onClick={this.toggleExpand}\n                >\n                  <BiCollapse />\n                </ToolTipButton>\n              ) : (\n                <ToolTipButton\n                  variant=\"primary\"\n                  tooltip=\"Expand\"\n                  onClick={this.toggleExpand}\n                >\n                  <BiExpand />\n                </ToolTipButton>\n              )}\n              <ToolTipButton\n                variant=\"success\"\n                tooltip=\"Copy JSON\"\n                onClick={this.copyToClipBoard}\n              >\n                <MdContentCopy />\n              </ToolTipButton>\n              <ToolTipButton\n                variant=\"danger\"\n                tooltip=\"Delete from DOM\"\n                onClick={this.toggleDelete}\n              >\n                <MdDelete />\n              </ToolTipButton>\n            </React.Fragment>\n          )}\n        </ButtonGroup>\n      </ButtonToolbar>\n    );\n  }\n}\n\nexport default Toolbar;\n","// There are the css classes used by Monaco Editor for different data types. e.g;\n// mtk4, mtk5, mtk6, mtk7, ...\n// We are using the same classes.\nconst THEMES = {\n  light: {\n    key: \"mtk20\",\n    str: \"text-info\",\n    num: \"mtk7\",\n    null: \"text-danger\",\n    boolean: \"mtk5\",\n  },\n  dark: {\n    key: \"mtk4\",\n    str: \"text-info\",\n    num: \"mtk6\",\n    null: \"text-danger\",\n    boolean: \"mtk5\",\n  },\n};\n\nfunction getCssForTheme(isDarkMode) {\n  const theme = isDarkMode ? THEMES.dark : THEMES.light;\n  function getCss(value_type) {\n    return theme[value_type];\n  }\n  return getCss;\n}\n\nexport function isExpandable(data) {\n  if (data === null) {\n    return false;\n  }\n  if (Array.isArray(data)) {\n    return data.length > 0;\n  } else if (typeof data === \"object\") {\n    return Object.keys(data).length > 0;\n  }\n  return false;\n}\n\nexport function visualizeSimpleContents(data, isDarkMode, is_heading) {\n  const getCss = getCssForTheme(isDarkMode);\n\n  function visualizeNull() {\n    return <span className={getCss(\"null\")}>null</span>;\n  }\n\n  function visualizeHeadings(data) {\n    return <span className={getCss(\"key\")}>{data}</span>;\n  }\n\n  function visualizeString(s) {\n    return <span className={getCss(\"str\")}>{s ? s : '\"\"'}</span>;\n  }\n\n  function visualizeNumber(num) {\n    return <span className={getCss(\"num\")}>{num}</span>;\n  }\n\n  function visualizeBoolean(b) {\n    return <span className={getCss(\"boolean\")}>{b ? \"true\" : \"false\"}</span>;\n  }\n\n  if (is_heading) {\n    return visualizeHeadings(data);\n  } else if (data === null) {\n    return visualizeNull();\n  } else if (typeof data === \"string\") {\n    return visualizeString(data);\n  } else if (typeof data === \"number\") {\n    return visualizeNumber(data);\n  } else if (data === false || data === true) {\n    return visualizeBoolean(data);\n  } else if (Array.isArray(data)) {\n    // An \"Empty\" Array found\n    if (data.length < 1) {\n      return \"[]\";\n    }\n  } else if (typeof data === \"object\") {\n    // An \"Empty\" Object found\n    if (Object.keys(data).length < 1) {\n      return \"{}\";\n    }\n  }\n  if (typeof data === \"symbol\") {\n    // any React symbol that is ready to render\n    return data;\n  }\n\n  console.log(typeof data + \" to be displayed\");\n  return <p>Some Data of type {typeof data}</p>;\n}\n","import React, { lazy, Suspense, useState } from \"react\";\nimport Toolbar from \"../toolbar\";\nimport { Spinner } from \"react-bootstrap\";\nimport memoize from \"memoize-one\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport makeTable, {\n  join_path,\n  filterObj,\n  truncateStrings,\n} from \"../../app/utils\";\n\nimport { isExpandable, visualizeSimpleContents } from \"./helper\";\nimport { updateJsonPath } from \"../statusbar/statusbarSlice\";\n\nconst Table = lazy(() => import(\"react-bootstrap/Table\"));\n\nconst filter = memoize((obj, filterText) => {\n  return filterObj(obj, filterText);\n});\n\nfunction Visualizer(props) {\n  const { searchText, expandAll, collapseAll } = useSelector(\n    (state) => state.statusbar\n  );\n  const { settings } = useSelector((state) => state.input);\n  const isDarkMode = settings.darkMode;\n  const TRUNCATE_LIMIT = settings.truncateLimit;\n\n  const [state, setState] = useState({\n    expanded: false,\n    deleted: false,\n  });\n\n  function renderTable(headings, rows) {\n    return (\n      <Suspense fallback={<Spinner animation=\"border\" variant=\"primary\" />}>\n        <Table\n          bordered\n          responsive={props.root ? true : false}\n          size=\"sm\"\n          variant={isDarkMode && \"dark\"}\n          style={{ marginBottom: 0 }}\n        >\n          <thead>\n            <tr>\n              {headings.map((heading) => (\n                <th key={heading} className=\"fit-contents\">\n                  {heading}\n                </th>\n              ))}\n            </tr>\n          </thead>\n          <tbody>\n            {rows.map((row, rowIndex) => {\n              const cell = row[0];\n              const row_path = join_path(props.json_path, cell.path_key);\n              return (\n                <tr key={rowIndex}>\n                  <MyCell\n                    key={cell.path_key}\n                    value={cell.value}\n                    th={true}\n                    json_path={row_path}\n                    // expand_signal={this.props.expand_signal}\n                  />\n                  {row.slice(1).map((cell, colIndex) => {\n                    if (cell) {\n                      return (\n                        <MyCell\n                          key={cell.path_key}\n                          value={cell.value}\n                          json_path={join_path(row_path, cell.path_key)}\n                          // searchText={this.props.searchText}\n                          // expand_signal={this.props.expand_signal}\n                        />\n                      );\n                    }\n                    return <td key={colIndex}></td>;\n                  })}\n                </tr>\n              );\n            })}\n          </tbody>\n        </Table>\n      </Suspense>\n    );\n  }\n\n  function renderExpandButton() {\n    return (\n      <Toolbar\n        data={props.data}\n        state={state}\n        setState={setState}\n        root={props.root}\n      />\n    );\n  }\n\n  if (state.deleted) {\n    return renderExpandButton();\n  }\n\n  const data = props.data;\n\n  // visualize simple data within a cell\n  if (!isExpandable(data)) {\n    if (settings.truncateStrings) {\n      const truncatedData = truncateStrings(data, TRUNCATE_LIMIT);\n      return visualizeSimpleContents(\n        truncatedData,\n        isDarkMode,\n        props.is_heading\n      );\n    }\n    return visualizeSimpleContents(data, isDarkMode, props.is_heading);\n  }\n\n  // if (props.root) {\n  //   console.log(\"Root Render...\", state);\n  // } else {\n  //   console.log(\"Child Render...\", state);\n  // }\n\n  const filteredData = filter(data, searchText);\n  const { headings, table } = makeTable(filteredData);\n  if (table.length < 1) {\n    if (props.root) {\n      return visualizeSimpleContents(\"NO RESULTS\", isDarkMode, true);\n    }\n    return null;\n  }\n\n  // if (this.props.root) {\n  //   console.log(\"Root Render...\", this.state);\n  // } else {\n  //   console.log(\"Child Render...\", this.state);\n  // }\n\n  if (collapseAll) {\n    state.expanded = false;\n  } else if (expandAll) {\n    state.expanded = true;\n  }\n\n  if (props.root || searchText || state.expanded) {\n    // Visualize data along with a expand/collapse button\n    return (\n      <React.Fragment>\n        {renderExpandButton()}\n        {renderTable(headings, table)}\n      </React.Fragment>\n    );\n  }\n\n  // The data is collapsed, just render the button\n  return renderExpandButton();\n}\n\n// class Visualizer2 extends Component {\n//   state = {\n//     expand: false,\n//     deleted: false,\n//   };\n\n//   TRUNCATE_LIMIT = 50;\n\n//   constructor(props) {\n//     super(props);\n//     this.setStateDelegation = this.setState.bind(this);\n//   }\n\n//   static getDerivedStateFromProps(props, state) {\n//     if (props.expand_signal === \"+\") {\n//       const new_state = { ...state, expand: true };\n//       return new_state;\n//     } else if (props.expand_signal === \"-\") {\n//       const new_state = { ...state, expand: false };\n//       return new_state;\n//     }\n//     return state;\n//   }\n\n//   // shouldComponentUpdate(state, props) {\n//   //   // if (state.expand_signal) {\n//   //   //   return false;\n//   //   // }\n//   //   return true;\n//   // }\n\n//   render() {\n//     // render undo delete button\n//     if (this.state.deleted) {\n//       return this.renderExpandButton();\n//     }\n\n//     const data = this.props.data;\n\n//     // visualize simple data within a cell\n//     if (!this.isExpandable()) {\n//       if (this.props.truncateStrings) {\n//         const truncatedData = truncateStrings(\n//           this.props.data,\n//           this.TRUNCATE_LIMIT\n//         );\n//         return this.visualizeSimpleContents(truncatedData);\n//       }\n//       return this.visualizeSimpleContents(data);\n//     }\n\n//     const filteredData = filter(data, this.props.searchText);\n//     const { headings, table } = makeTable(filteredData);\n//     if (table.length < 1) {\n//       if (this.props.root) {\n//         return this.visualizeHeadings(\"NO RESULTS\");\n//       }\n//       return null;\n//     }\n\n//     if (this.state.expand || this.props.root || this.props.searchText) {\n//       // Visualize data along with a expand/collapse button\n//       return (\n//         <React.Fragment>\n//           {this.renderExpandButton()}\n//           {this.renderTable(headings, table)}\n//         </React.Fragment>\n//       );\n//     }\n\n//     // The data is collapsed, just render the button\n//     return this.renderExpandButton();\n//   }\n\n//   renderExpandButton = () => {\n//     return (\n//       <Toolbar\n//         data={this.props.data}\n//         state={this.state}\n//         setState={this.setStateDelegation}\n//         hide_controls={this.props.root === true}\n//         root={this.props.root === true}\n//       />\n//     );\n//   };\n\n//   isExpandable = () => {\n//     const data = this.props.data;\n\n//     if (data === null) {\n//       return false;\n//     }\n//     if (Array.isArray(data)) {\n//       return data.length > 0;\n//     } else if (typeof data === \"object\") {\n//       return Object.keys(data).length > 0;\n//     }\n//     return false;\n//   };\n// }\n\nfunction MyCell(props) {\n  const dispatch = useDispatch();\n\n  function handleClick(event) {\n    event.stopPropagation();\n    if (\n      [\"TD\", \"TH\", \"SPAN\"].includes(event.target.nodeName) &&\n      event.target.innerHTML\n    ) {\n      // handle the event\n      dispatch(updateJsonPath(props.json_path));\n    } else {\n      // ignore the event\n      event.preventDefault();\n    }\n  }\n\n  const Tag = props.th ? \"th\" : \"td\";\n  return (\n    <Tag onClick={handleClick}>\n      <Visualizer\n        is_heading={props.th}\n        data={props.value}\n        json_path={props.json_path}\n        // expand_signal={this.props.expand_signal}\n      />\n    </Tag>\n  );\n}\n\nexport default Visualizer;\n"],"sourceRoot":""}